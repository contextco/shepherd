// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: protos/service.proto

package service_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnPrem_Start_FullMethodName = "/OnPrem/Start"
)

// OnPremClient is the client API for OnPrem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnPremClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
}

type onPremClient struct {
	cc grpc.ClientConnInterface
}

func NewOnPremClient(cc grpc.ClientConnInterface) OnPremClient {
	return &onPremClient{cc}
}

func (c *onPremClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, OnPrem_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnPremServer is the server API for OnPrem service.
// All implementations must embed UnimplementedOnPremServer
// for forward compatibility.
type OnPremServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	mustEmbedUnimplementedOnPremServer()
}

// UnimplementedOnPremServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnPremServer struct{}

func (UnimplementedOnPremServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedOnPremServer) mustEmbedUnimplementedOnPremServer() {}
func (UnimplementedOnPremServer) testEmbeddedByValue()                {}

// UnsafeOnPremServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnPremServer will
// result in compilation errors.
type UnsafeOnPremServer interface {
	mustEmbedUnimplementedOnPremServer()
}

func RegisterOnPremServer(s grpc.ServiceRegistrar, srv OnPremServer) {
	// If the following call pancis, it indicates UnimplementedOnPremServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnPrem_ServiceDesc, srv)
}

func _OnPrem_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnPremServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnPrem_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnPremServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnPrem_ServiceDesc is the grpc.ServiceDesc for OnPrem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnPrem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OnPrem",
	HandlerType: (*OnPremServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _OnPrem_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}
